{"version":3,"sources":["App.tsx","components/GoodList/GoodList.tsx","components/Button/Button.tsx","index.tsx"],"names":["SortType","GoodList","goods","map","good","Button","this","props","name","className","onClick","type","React","PureComponent","goodsFromServer","App","useState","isReversed","changeIsReversed","NONE","sortType","changeSortType","handleSort","typeOfSort","checkReset","reorderedGoods","visibleGoods","sort","curGood","nextGood","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","classNames","curState","ReactDOM","render","document","getElementById"],"mappings":"6KAqBKA,E,sECfQC,EAA4B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC1C,OACE,6BACGA,EAAMC,KAAI,SAACC,GAAD,OACT,oBACE,UAAQ,OADV,SAIGA,GAFIA,S,8BCJFC,EAAb,4JACE,WACE,MAIIC,KAAKC,MAHPC,EADF,EACEA,KACAC,EAFF,EAEEA,UACAC,EAHF,EAGEA,QAGF,OACE,wBACEC,KAAK,SACLF,UAAWA,EACXC,QAASA,EAHX,SAKGF,QAdT,GAA4BI,IAAMC,eFArBC,G,YAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,Y,SAGGd,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAqCE,IAAMe,EAAgB,WAC3B,MAAuCC,oBAAS,GAAhD,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAmCF,mBAAShB,EAASmB,MAArD,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EAAa,SAACC,GAClBF,EAAeE,IAYXC,EAAaJ,IAAapB,EAASmB,MAAQF,EAC3CQ,EA5CD,SACLvB,EADK,GAGJ,IADCkB,EACF,EADEA,SAAUH,EACZ,EADYA,WAENS,EAAY,YAAOxB,GAmBzB,OAjBAwB,EAAaC,MAAK,SAACC,EAASC,GAC1B,OAAQT,GACN,KAAKpB,EAAS8B,SACZ,OAAOF,EAAQG,cAAcF,GAE/B,KAAK7B,EAASgC,OACZ,OAAOJ,EAAQK,OAASJ,EAASI,OAEnC,QACE,OAAO,MAIThB,GACFS,EAAaQ,UAGRR,EAqBgBS,CACrBrB,EACA,CAAEG,aAAYG,aAGhB,OACE,sBAAKX,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,cAAC,EAAD,CACED,KAAK,sBACLC,UAAW2B,IACT,iBACA,CAAE,WAAYhB,IAAapB,EAAS8B,WAEtCpB,QAAS,WACPY,EAAWtB,EAAS8B,aAIxB,cAAC,EAAD,CACEtB,KAAK,iBACLC,UAAW2B,IACT,oBACA,CAAE,WAAYhB,IAAapB,EAASgC,SAEtCtB,QAAS,WACPY,EAAWtB,EAASgC,WAIxB,cAAC,EAAD,CACExB,KAAK,UACLC,UAAW2B,IACT,oBACA,CAAE,YAAanB,IAEjBP,QA9Ca,WACnBQ,GAAiB,SAAAmB,GAAQ,OAAKA,QAgDzBb,GACC,cAAC,EAAD,CACEhB,KAAK,QACLC,UAAU,4BACVC,QAjDS,WACjBQ,GAAiB,GACjBG,EAAerB,EAASmB,YAoDtB,cAAC,EAAD,CAAUjB,MAAOuB,QGzHvBa,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.9a59a33a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { GoodList } from './components/GoodList';\nimport { Button } from './components/Button';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((curGood, nextGood) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return curGood.localeCompare(nextGood);\n\n      case SortType.LENGTH:\n        return curGood.length - nextGood.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, changeIsReversed] = useState(false);\n  const [sortType, changeSortType] = useState(SortType.NONE);\n\n  const handleSort = (typeOfSort: SortType) => {\n    changeSortType(typeOfSort);\n  };\n\n  const reverseGoods = () => {\n    changeIsReversed(curState => !curState);\n  };\n\n  const resetGoods = () => {\n    changeIsReversed(false);\n    changeSortType(SortType.NONE);\n  };\n\n  const checkReset = sortType !== SortType.NONE || isReversed;\n  const reorderedGoods = getReorderedGoods(\n    goodsFromServer,\n    { isReversed, sortType },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <Button\n          name=\"Sort alphabetically\"\n          className={classNames(\n            'button is-info',\n            { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n          onClick={() => {\n            handleSort(SortType.ALPHABET);\n          }}\n        />\n\n        <Button\n          name=\"Sort by length\"\n          className={classNames(\n            'button is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={() => {\n            handleSort(SortType.LENGTH);\n          }}\n        />\n\n        <Button\n          name=\"Reverse\"\n          className={classNames(\n            'button is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={reverseGoods}\n        />\n\n        {checkReset && (\n          <Button\n            name=\"Reset\"\n            className=\"button is-danger is-light\"\n            onClick={resetGoods}\n          />\n        )}\n      </div>\n\n      <GoodList goods={reorderedGoods} />\n    </div>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  goods: string[],\n};\n\nexport const GoodList: React.FC<Props> = ({ goods }) => {\n  return (\n    <ul>\n      {goods.map((good) => (\n        <li\n          data-cy=\"Good\"\n          key={good}\n        >\n          {good}\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React from 'react';\n\ninterface Props {\n  name: string,\n  onClick: (event: React.MouseEvent<HTMLButtonElement>) => void,\n  className: string,\n}\n\nexport class Button extends React.PureComponent<Props, {}> {\n  render(): React.ReactNode {\n    const {\n      name,\n      className,\n      onClick,\n    } = this.props;\n\n    return (\n      <button\n        type=\"button\"\n        className={className}\n        onClick={onClick}\n      >\n        {name}\n      </button>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}